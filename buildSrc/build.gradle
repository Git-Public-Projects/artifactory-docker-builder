/*
 * Copyright (C) 2015 JFrog Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'groovy'
apply plugin: 'idea'

sourceCompatibility = 1.5
import org.apache.tools.ant.filters.*

def artifactory_dependenciesUrl = project.hasProperty("artifactory_dependenciesUrl") ? artifactory_dependenciesUrl : System.getenv("artifactory_dependenciesUrl")
def artifactory_contextUrl = System.getenv("artifactory_contextUrl") ?: getProjectProperty("artifactory_contextUrl", true)
def oss_repository = System.getenv("oss_repository") ?: getProjectProperty("oss_repository", true)
def pro_repository = System.getenv("pro_repository") ?: getProjectProperty("pro_repository", true)

processResources {

    filter ReplaceTokens, tokens: [
            "artifactory_contextUrl": artifactory_contextUrl,
            "oss_repository"        : oss_repository,
            "pro_repository"        : pro_repository
    ]
    println "contextUrl " + artifactory_contextUrl
    println "oss repository " + oss_repository
    println "pro repository " + pro_repository
}

version = '1.0'
repositories {
    maven {
        url artifactory_dependenciesUrl
    }
    jcenter()
}

dependencies {
    gradleApi()

    compile 'org.codehaus.groovy:groovy-all:2.4.3'
    compile 'org.jfrog.artifactory.client:artifactory-java-client-services:1.2.2'
    compile 'org.jfrog.util:docker-remote-util:0.5-SNAPSHOT'
}

def getProjectProperty(String property, boolean isMandatory = false) {
    if (project.hasProperty(property)) {
        return project.property(property)
    } else {
        if (isMandatory) {
            throw new MissingPropertyException("$property is mandatory.")
        } else {
            return null
        }
    }
}

compileGroovy.dependsOn clean
